<?php

/**
 * BaseChanson
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property string $titre
 * @property time $duree
 * @property string $audio_file
 * @property integer $id_album
 * @property integer $piste
 * @property boolean $has_metadata
 * @property Album $Album
 * @property Doctrine_Collection $Playlists
 * @property Doctrine_Collection $ChansonsPlaylists
 * 
 * @method string              getTitre()             Returns the current record's "titre" value
 * @method time                getDuree()             Returns the current record's "duree" value
 * @method string              getAudioFile()         Returns the current record's "audio_file" value
 * @method integer             getIdAlbum()           Returns the current record's "id_album" value
 * @method integer             getPiste()             Returns the current record's "piste" value
 * @method boolean             getHasMetadata()       Returns the current record's "has_metadata" value
 * @method Album               getAlbum()             Returns the current record's "Album" value
 * @method Doctrine_Collection getPlaylists()         Returns the current record's "Playlists" collection
 * @method Doctrine_Collection getChansonsPlaylists() Returns the current record's "ChansonsPlaylists" collection
 * @method Chanson             setTitre()             Sets the current record's "titre" value
 * @method Chanson             setDuree()             Sets the current record's "duree" value
 * @method Chanson             setAudioFile()         Sets the current record's "audio_file" value
 * @method Chanson             setIdAlbum()           Sets the current record's "id_album" value
 * @method Chanson             setPiste()             Sets the current record's "piste" value
 * @method Chanson             setHasMetadata()       Sets the current record's "has_metadata" value
 * @method Chanson             setAlbum()             Sets the current record's "Album" value
 * @method Chanson             setPlaylists()         Sets the current record's "Playlists" collection
 * @method Chanson             setChansonsPlaylists() Sets the current record's "ChansonsPlaylists" collection
 * 
 * @package    sonor
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseChanson extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('chanson');
        $this->hasColumn('titre', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
        $this->hasColumn('duree', 'time', null, array(
             'type' => 'time',
             ));
        $this->hasColumn('audio_file', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
        $this->hasColumn('id_album', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('piste', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('has_metadata', 'boolean', null, array(
             'type' => 'boolean',
             'default' => false,
             ));

        $this->option('collate', 'utf8_general_ci');
        $this->option('charset', 'utf8');
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Album', array(
             'local' => 'id_album',
             'foreign' => 'id',
             'onDelete' => 'CASCADE',
             'onUpdate' => 'CASCADE'));

        $this->hasMany('Playlist as Playlists', array(
             'refClass' => 'ChansonsPlaylists',
             'local' => 'id_chanson',
             'foreign' => 'id_playlist'));

        $this->hasMany('ChansonsPlaylists', array(
             'local' => 'id',
             'foreign' => 'id_chanson'));

        $sluggable0 = new Doctrine_Template_Sluggable(array(
             'fields' => 
             array(
              0 => 'titre',
             ),
             'name' => 'slug',
             'type' => 'string',
             'length' => 255,
             'unique' => true,
             'canUpdate' => true,
             ));
        $this->actAs($sluggable0);
    }
}